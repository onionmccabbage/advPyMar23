Python Advanced
===============

 6-9 March 2023
 Toby Dussek

All my code will be here:
  https://github.com/onionmccabbage/advPyMar23

Course Website:
  https://s3.eu-west-1.amazonaws.com/neueda.conygre.com/Sites/Ericsson_Advanced_Python/site/index.html

9:30 start
11:00 coffee
12:30 lunch
3:00 tea break until 3:15
4:30 end

- you will need: a copy of Python 3.x (real or virtual)
- an editor: VS Code, PyCharm, Spyder etc...
- internet, able to install python libraries (e.g. requests library)

Python code lives in classes or in functions, in modules, which live in packages (folders)

Monday
> intro and welcome
  - what do you currently know
  - what do you want to know
> abstract and concrete classes
> name mangled members
> if __name__== '__main__': revisited
> using decorators
> functional programming: map, filter and reduce
- Loading local and remote data (requests)
> after lunch review
  show what you built
> instrinsics
- comprehensions, generators and yield
> importing json from a .json file

Tuesday
- how to make use of break-out rooms
- functional programming: parameters
- archictecture - how to decide where to break code down into modules
- processing text/json
  - json.loads() takes JSON and returns Python structure
  - json.dumps() takes Python structure and returns JSON
> persisting files: read/write/append/exclusive/overwrite, text, bytes, json
> databases
  see https://wiki.python.org/moin/DatabaseProgramming
> other db connections
> fixed: broken custom_read - my line 19 was missing LIKE keyword
> Create (inc multiple and security, Read and Update (and DELETE) - CRUD operations
> populate db with sample data
> read and nicely format values from the db
> explore 'typicode' API as a static data source for JSON
> after lunch review exercise
  ask questions, help each other, share code (screen-share)

Wednesday
> logging...
> pip
> context manager - switch context e.g. for handling data input and output
> networking server/client (microservices)
> build a collection of microservices and clients to implement an architecture
> overview of Flask
  > pass data assets into HTML content
> Testing: 
  > doctest revisited
  see https://docs.python.org/3/library/doctest.html
  > unittest
> after lunch lab exercise
> pytest see https://docs.pytest.org/

Thursday
- profiling: timings etc. (cprofile)
- multithreading, also limits of mutlithreading concurrency
- the global Interpreter Lock (GIL) will affect threading performance
- join many threads: iterate oever a lsit/tuple of threads
- Python has -O to optimize code (especially usefull for threading)
- after lunch lab exercise
- logging - context mgr, often we log by time-stamp
- iter
- named tuple
- zip






- end of course feedback
    https://apps.powerapps.com/play/17579985-153c-4727-b1f4-8b53e48b5e72?tenantId=92e84ceb-fbfd-47ab-be52-080c6b87953f&Type=ILT&ID=LZU1503352&OID=506747&Title=Machine%20Learning%20and%20Deep%20Learning%20using%20Python&Owner=Sachin%20Srivastava%20B






Useful Resources
- https://pynative.com/python-exercises-with-solutions/
- https://realpython.com/
- moving from Py2 to Py3
  https://docs.python.org/3/howto/pyporting.html













